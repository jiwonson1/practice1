package com.kh.common;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class JDBCTemplate {
	
	//모든메소드들 static메소드
	
	//1. Connection 객체 생성(DB접속)한 후 해당 생성된 Connection반환해주는 getConnection메소드
	public static Connection getConnection() {
		
		
		try {
			// 1) Oracle Driver class 등록 (jdbc.driver 등록)
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 2) Connection 객체 생성 (DB와 접속)
			conn = DriverManager.getConnection("", "", "");
			
			
			
			
			
		} catch (ClassNotFoundException e) { // ojdbc6.jar가 추가가 안되어있거나, 오타있다거나
			e.printStackTrace();
		}
		
		
		
		
	}
	
	
	//2. Connecion객체 전달 받아서 commit해주는 commit메소드
	public static void commit(Connection conn) {
		
		try {
			if(conn != null && !conn.isClosed()) {
				conn.commit();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	
	
	//3. Connection객체 전달 받아서 rollback해주는 rollback메소드
	
	public static void rollback(Connection conn) {
		try {
			if(conn!=null && conn.isClosed()) {
				conn.rollback();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	//4. Connection객체 전달 받아서 close해주는 close메소드
	
	public static void close(Connection conn) {
		try {
			if(conn != null && !conn.isClosed()) {
				conn.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	//5. Statement관련객체 전달 받아서 close해주는 close메소드
	public static void close(Statement stmt) {
		try {
			if(stmt != null && !stmt.isClosed()) {
				stmt.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	//6. ResultSet객체 전달 받아서 close해주는 close메소드
	public static void close(ResultSet rset) {
		try {
			if(rset != null && !rset.isClosed()) {
				rset.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	

}
